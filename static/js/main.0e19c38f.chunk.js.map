{"version":3,"sources":["components/LunarTracker.js","components/PressureTracker.js","components/Footer.js","components/WeatherData.js","App.js","reportWebVitals.js","index.js"],"names":["LunarTracker","useState","moonphase","setMoonPhase","moonicon","setMoonIcon","currentdate","setCurrentDate","assignIcon","useEffect","newdate","Date","month","day","year","organizeddate","getMonth","console","log","getFullYear","getDate","toString","juliandate","b","parseInt","Math","round","calculatePhase","className","src","alt","PressureTracker","props","differenceresultthree","differenceresultnine","start","end","startb","endb","convertstart","convertToMercury","convertend","convertstartb","convertendb","fontcolora","color","fontcolorb","x","converted","difference","recentchange","setPressure","setPressureNine","style","Footer","href","AppContents","cityname","setCity","setDate","currenttemp","setTemp","weathercode","setWeatherCode","weatherlink","setWeatherLink","currentdecription","setDescription","windspeed","setWind","userInput","setSearchValue","startingPressure","setStartPressure","endingPressure","setEndPressure","startingPressureB","setStartPressureB","endingPressureB","setEndingPressureB","a","fetch","catch","error","alert","response","newDate","date","json","weatherData","city","name","list","main","pressure","temp","weather","id","description","wind","speed","getWeatherImage","identifier","charAt","type","onChange","event","target","value","onClick","fetchWeatherJSON","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0e19c38f.chunk.js","sourcesContent":["// this component must calculate and display the current lunar phase\r\nimport React, { useState, useEffect } from 'react';\r\nimport '../styles/LunarTracker.css';\r\n\r\n\r\n\r\nconst LunarTracker = () => {\r\n    const [moonphase, setMoonPhase] = useState(\"\");\r\n    const [moonicon, setMoonIcon] = useState(\"\");\r\n    const [currentdate, setCurrentDate] = useState(\"\");\r\n\r\n\r\n    // Initialize data in component once component is loaded\r\n    useEffect(() => {\r\n        // eslint-disable-next-line\r\n        calculatePhase();\r\n    }, []);\r\n\r\n    // main function to calculate the current phase\r\n    function calculatePhase() {\r\n        // establish date variables\r\n        // establishes date object\r\n        let newdate = new Date();\r\n        let month = 0;\r\n        let day = 0;\r\n        let year = 0;\r\n        let organizeddate = \"\";\r\n        // returns month with 0-11, with 1 added to make 1-12\r\n        month = newdate.getMonth() + 1;\r\n        console.log(\"Month: \" + month);\r\n        // returns 4 digit year\r\n        year = newdate.getFullYear();\r\n        console.log(\"Year: \" + year);\r\n        // returns 2 digit day\r\n        day = newdate.getDate();\r\n        console.log(\"Day: \" + day);\r\n        organizeddate = month.toString() + \"/\" + day.toString() + \"/\" + year.toString();\r\n        setCurrentDate(organizeddate);\r\n        console.log(currentdate);\r\n\r\n        // establish julian date variables\r\n        let c = 0;\r\n        let e = 0;\r\n        let juliandate = 0;\r\n        let b = 0;\r\n\r\n        if (month < 3) {\r\n            year--;\r\n            month += 12;\r\n        };\r\n\r\n        ++month;\r\n        c = 365.25 * year;\r\n        e = 30.6 * month;\r\n        juliandate = c + e + day - 694039.09;\r\n        juliandate /= 29.5305882;\r\n        b = parseInt(juliandate);\r\n        juliandate -= b;\r\n        b = Math.round(juliandate * 8);\r\n        if (b >= 8) {\r\n            b = 0;\r\n        };\r\n\r\n        // update phase based on result\r\n        // also use callback function to get url for correct moon icon based on current phase\r\n        if (b === 0) {\r\n            console.log(\"New moon\");\r\n            setMoonPhase(\"New\");\r\n            setMoonIcon(assignIcon(\"New\"));\r\n        } else if (b === 1) {\r\n            console.log(\"Waxing Crescent\");\r\n            setMoonPhase(\"Waxing Crescent\");\r\n            setMoonIcon(assignIcon(\"Waxing Crescent\"));\r\n        } else if (b === 2) {\r\n            console.log(\"Fist Quarter\");\r\n            setMoonPhase(\"First Quarter\");\r\n            setMoonIcon(assignIcon(\"First Quarter\"));\r\n        } else if (b === 3) {\r\n            console.log(\"Waxing Gibbous\");\r\n            setMoonPhase(\"Waxing Gibbous\");\r\n            setMoonIcon(assignIcon(\"Waxing Gibbous\"));\r\n        } else if (b === 4) {\r\n            console.log(\"Full moon\");\r\n            setMoonPhase(\"Full\");\r\n            setMoonIcon(assignIcon(\"Full\"))\r\n        } else if (b === 5) {\r\n            console.log(\"Waning Gibbous\");\r\n            setMoonPhase(\"Waning Gibbous\");\r\n            setMoonIcon(assignIcon(\"Waning Gibbous\"));\r\n        } else if (b === 6) {\r\n            console.log(\"Last Quarter\");\r\n            setMoonPhase(\"Last Quarter\");\r\n            setMoonIcon(assignIcon(\"Last Quarter\"));\r\n        } else if (b === 7) {\r\n            console.log(\"Waning Crescent\");\r\n            setMoonPhase(\"Waning Crescent\");\r\n            setMoonIcon(assignIcon(\"Waning Crescent\"));\r\n        };\r\n\r\n\r\n\r\n    };\r\n\r\n\r\n\r\n    // Assign url of proper icon based on current phase\r\n    function assignIcon(moonphase) {\r\n        let url = \"\";\r\n\r\n        if (moonphase === 'New') {\r\n            url = \"moon_icons/png/001-new-moon.png\";\r\n        } else if (moonphase === \"Waxing Crescent\") {\r\n            url = \"moon_icons/png/002-waxing-moon.png\";\r\n        } else if (moonphase === \"First Quarter\") {\r\n            url = \"moon_icons/png/003-first-quarter.png\";\r\n        } else if (moonphase === \"Waxing Gibbous\") {\r\n            url = \"moon_icons/png/004-waxing-moon-1.png\";\r\n        } else if (moonphase === \"Full\") {\r\n            url = \"moon_icons/png/005-moon.png\";\r\n        } else if (moonphase === \"Waning Gibbous\") {\r\n            url = \"moon_icons/png/006-waning-moon.png\";\r\n        } else if (moonphase === \"Last Quarter\") {\r\n            url = \"moon_icons/png/007-crescent-moon.png\";\r\n        } else {\r\n            url = \"moon_icons/png/006-waning-moon.png\";\r\n        };\r\n\r\n        return url;\r\n    };\r\n\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"lunar-card-container\">\r\n            <p className=\"lunar-phase-title\">Lunar Phase</p>\r\n            <div>\r\n                <img className=\"moon-icon\" src={moonicon} alt=\"Icon of Moon Phase\"></img>\r\n            </div>\r\n            <p className=\"current-phase-text\">{moonphase}</p>\r\n            <p className=\"date-container\">{currentdate}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LunarTracker;","import '../styles/PressureTracker.css';\r\n\r\n// Change result to be first. No need for start and end measurements. 6 and 12 hour difference\r\n\r\nconst PressureTracker = (props) => {\r\n    let start = props.start;\r\n    let end = props.end;\r\n    let startb = props.startb;\r\n    let endb = props.endb;\r\n    let differenceresultthree = '';\r\n    let differenceresultnine = '';\r\n    let convertstart = convertToMercury(start);\r\n    let convertend = convertToMercury(end);\r\n    let convertstartb = convertToMercury(startb);\r\n    let convertendb = convertToMercury(endb);\r\n    let fontcolora = { color: 'white' };\r\n    let fontcolorb = { color: 'white' };\r\n    \r\n  \r\n    function setPressure(){\r\n        let difference = 0;\r\n        let recentchange = '';\r\n        if (convertstart > convertend){\r\n            // pressure decrease\r\n            fontcolora = { color: 'red' };\r\n            difference = convertstart - convertend;\r\n            difference = Math.round(difference * 100) / 100;\r\n            recentchange = '↓' + difference.toString();\r\n            // assign color to class list and remove what's currently there\r\n        } else if(convertend > convertstart){\r\n            // pressure increase\r\n            fontcolora = { color: 'green' };\r\n            difference = convertend - convertstart;\r\n            difference = Math.round(difference * 100) / 100;\r\n            recentchange = '↑' + difference.toString();\r\n        } else if(convertend === convertstart){\r\n            fontcolora = { color: 'white' };\r\n            recentchange = '0';\r\n            // assign color to class list and remove what's currently there\r\n        }\r\n        return recentchange;\r\n    };\r\n\r\n    function setPressureNine(){\r\n        let difference = 0;\r\n        let recentchange = '';\r\n        if (convertstartb > convertendb){\r\n            // pressure decrease\r\n            fontcolorb = { color: 'red' };\r\n            difference = convertstartb - convertendb;\r\n            difference = Math.round(difference * 100) / 100;\r\n            recentchange = '↓' + difference.toString();\r\n            // assign color to class list and remove what's currently there\r\n        } else if(convertendb > convertstartb){\r\n            // pressure increase\r\n            fontcolorb = { color: 'green' };\r\n            difference = convertendb - convertstartb;\r\n            difference = Math.round(difference * 100) / 100;\r\n            recentchange = '↑' + difference.toString();\r\n        } else if(convertendb === convertstartb){\r\n            fontcolorb = { color: 'white' };\r\n            recentchange = '0';\r\n            // assign color to class list and remove what's currently there\r\n        }\r\n        return recentchange;\r\n    }\r\n\r\n    \r\n\r\n\r\n\r\n    function convertToMercury(x){\r\n        let converted = x/33.86;\r\n        converted = Math.round(converted * 100) / 100;\r\n        return converted;\r\n    };\r\n\r\n    differenceresultthree = setPressure();\r\n    differenceresultnine = setPressureNine();\r\n\r\n    return(\r\n        // html to return\r\n        <div className=\"pressure-checking-machine\">\r\n            <h1 className=\"pressure-title\">Air Pressure: </h1>\r\n            <img className=\"barometer-icon\" src=\"images/barometer.png\" alt=\"Barometer Icon\"></img>\r\n            <p className=\"pressure-change-value\">6 Hours</p>\r\n            <h2 className=\"six-hour-change\" style={fontcolora}>ΔP {differenceresultthree} inHg </h2>\r\n            <p className=\"pressure-change-value\">9 Hours</p>\r\n            <h2 className=\"nine-hour-change\" style={fontcolorb}>ΔP {differenceresultnine} inHg</h2>\r\n        </div>\r\n    )\r\n\r\n\r\n}\r\n\r\n\r\nexport default PressureTracker;","import '../styles/Footer.css';\r\n\r\nconst Footer = () => {\r\n\r\n\r\n\r\n    return (\r\n        <div className='footer-container'>\r\n            <footer>\r\n            <p className='footer-text'> Contacts </p>\r\n                <ul className='footer-items'>\r\n                    <li>\r\n                        <div className='logo-list'>\r\n                            <a href=\"www.linkedin.com/in/sfraley-developer\"><img src='images/logos_linkedin-icon.png' alt=\"LinkedIn profile link\"></img></a>\r\n                            <a href=\"https://github.com/msjupiter96\"><img src='images/akar-icons_github-fill.png' alt=\"Github profile link\"></img></a>\r\n                            <a href=\"mailto:fraleysn@gmail.com?subject=Message from Fishing App\"><img src='images/carbon_email.png' alt=\"Email link\"></img></a>\r\n                        </div>\r\n                    </li>\r\n                </ul>\r\n            </footer>\r\n        </div>\r\n    )\r\n\r\n};\r\n\r\n\r\nexport default Footer;","import React, { useState }  from 'react';\r\nimport '../styles/WeatherData.css';\r\nimport LunarTracker from '../components/LunarTracker.js';\r\nimport PressureTracker from '../components/PressureTracker.js';\r\nimport Footer from '../components/Footer.js';\r\n\r\n// function expression holding the entire weather card\r\n\r\nconst AppContents = () => {\r\n    // State variables for program located here\r\n    const [cityname, setCity] = useState('Seattle');\r\n    const [currentdate, setDate] = useState('');\r\n    const [currenttemp, setTemp] = useState('29.15°');\r\n    const [weathercode, setWeatherCode] = useState('800');\r\n    const [weatherlink, setWeatherLink] = useState('/weather_icons/images/sunny.png');\r\n    const [currentdecription, setDescription] = useState('Overcast');\r\n    const [windspeed, setWind] = useState('2.25mph');\r\n    const [userInput, setSearchValue] = useState('Seattle');\r\n    const [startingPressure, setStartPressure] = useState(0);\r\n    const [endingPressure, setEndPressure] = useState(0);\r\n    const [startingPressureB, setStartPressureB] = useState(0);\r\n    const [endingPressureB, setEndingPressureB] = useState(0);\r\n\r\n\r\n    async function fetchWeatherJSON() {\r\n        const response = await fetch(\"https://community-open-weather-map.p.rapidapi.com/forecast?q=\" + userInput + \"%2Cus&units=imperial\", {\r\n            \"method\": \"GET\",\r\n            \"headers\": {\r\n                \"x-rapidapi-host\": \"community-open-weather-map.p.rapidapi.com\",\r\n                \"x-rapidapi-key\": \"b5f5e3e434mshaaf4a42ec34cc73p1320b3jsn614676da6c86\",\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            alert(\"There was an error: \" + error);\r\n        });\r\n\r\n        // get current date to display by default\r\n        let newDate = new Date();\r\n        let date = newDate.getMonth()+ 1 + '/' + newDate.getDate() + '/' + newDate.getFullYear();\r\n        setDate(date);\r\n        \r\n        \r\n        // convert to json object\r\n        const weatherData = await response.json();\r\n        // assign state variables to corresponding object value\r\n        setCity(weatherData.city.name);\r\n        setStartPressure(weatherData.list[0].main.pressure);\r\n        setEndPressure(weatherData.list[2].main.pressure);\r\n        setStartPressureB(weatherData.list[0].main.pressure);\r\n        setEndingPressureB(weatherData.list[3].main.pressure);\r\n        setTemp(weatherData.list[0].main.temp + '°F');\r\n        setWeatherCode(weatherData.list[0].weather[0].id.toString());\r\n        setDescription(weatherData.list[0].weather[0].description);\r\n        setWind(weatherData.list[0].wind.speed.toString() + ' mph');\r\n        setWeatherLink(getWeatherImage());\r\n        \r\n    };\r\n\r\n    const getUserInput = (event) =>{\r\n        // Update search value based on input\r\n        setSearchValue(event.target.value);\r\n    };\r\n\r\n\r\n\r\n\r\n\r\n\r\n    function getWeatherImage(){\r\n        let url = '';\r\n        let identifier = weathercode.charAt(0);\r\n        if (identifier === '2'){\r\n            // thunderstorm icons\r\n            url = 'images/thunderstorm.png';\r\n        } else if (identifier === '3'){\r\n            // drizzle icons\r\n            url = 'images/rain-sun.png';\r\n        } else if (identifier === '5'){\r\n            // rain icons\r\n            url = 'images/rainy.png';\r\n        } else if (identifier === '6'){\r\n            // snow icons\r\n            url = 'images/snowing.png';\r\n        } else if (identifier === '7'){\r\n            // atmospheric icons\r\n            url = 'images/dark-clouds.png';\r\n        } else if (identifier === '8'){\r\n            // test whether clear of cloudy\r\n            if (weathercode === '800'){\r\n                // clear icon\r\n                url = 'images/sunny.png';\r\n            } else{\r\n                //cloudy icon\r\n                url = 'images/dark-clouds.png';\r\n            }\r\n        } else{\r\n            // no identifiers matched\r\n            url = 'images/sunny.png';\r\n        };\r\n        return url;\r\n    }\r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    \r\n\r\n    // JSX displaying the html/css of the weather app with functions intertwined\r\n    return (\r\n        <div className='weather-card-wrapper'>\r\n            <h1>Enter City Name </h1>\r\n            <input type=\"text\" name=\"submit\" onChange={getUserInput} className=\"user-search\"></input>\r\n            <button onClick={() => {fetchWeatherJSON()}} className='search-button'>Search</button>\r\n            <div className='app-sections'>\r\n                <div className=\"weather-data-return\">\r\n                    <h2>{cityname}</h2>\r\n                    <img className='weather-icon' src={weatherlink} alt=\"Weather Icon\"></img>\r\n                    <p className='current-temp'>{currenttemp}</p>\r\n                    <p className='current-desc'>{currentdecription}</p>\r\n                    <p className='current-wind'>Wind Speed: {windspeed}</p>\r\n                </div>\r\n\r\n                <div className='lunar-tracking-container-1'>\r\n                    <LunarTracker />\r\n                </div>\r\n\r\n                <div className='pressure-tracker-container-1'>\r\n                    <PressureTracker start={startingPressure} end={endingPressure} startb={startingPressureB} endb={endingPressureB}/>\r\n                </div>\r\n\r\n            </div>\r\n\r\n            <div className='footer-outer-container'>\r\n                    <Footer />\r\n            </div>\r\n\r\n\r\n        </div>\r\n\r\n    \r\n    )\r\n}\r\n\r\nexport default AppContents;","import './App.css';\nimport AppContents from './components/WeatherData.js';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <main className='main-components'>\n        <AppContents />\n      </main>\n      \n    </div>\n  );\n}\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App className=\"main-app\" />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}